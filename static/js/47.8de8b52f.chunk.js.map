{"version":3,"file":"static/js/47.8de8b52f.chunk.js","mappings":"yUAEAA,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAU,mCACVC,EAAW,sCAEXC,EAAmB,mCAAG,8FAC3BH,EAAAA,EAAAA,IAAA,mCAAsCC,IADX,mFAAH,qDAGnBG,EAAiB,mCAAG,WAAMC,GAAN,iFACzBL,EAAAA,EAAAA,IAAA,gBAAmBK,EAAnB,oBAAsCJ,IADb,mFAAH,sDAGjBK,EAAgB,mCAAG,WAAMD,GAAN,iFACxBL,EAAAA,EAAAA,IAAA,gBAAmBK,EAAnB,4BAA8CJ,IADtB,mFAAH,sDAGhBM,EAAmB,mCAAG,WAAMF,GAAN,iFAC3BL,EAAAA,EAAAA,IAAA,gBAAmBK,EAAnB,4BAA8CJ,EAA9C,YAD2B,mFAAH,sDAGnBO,EAAkB,mCAAG,WAAMC,GAAN,iFAC1BT,EAAAA,EAAAA,IAAA,+BAAkCC,EAAlC,kBAAmDQ,EAAnD,YAD0B,mFAAH,qD,0FChBlBC,EAAQC,EAAAA,GAAAA,OAAH,4iBA0BLC,GAAYD,EAAAA,EAAAA,IAAOE,EAAAA,IAAPF,CAAH,yD,SC3BTG,EAAW,WAStB,OACE,SAACJ,EAAD,CAAOK,KAAK,SAASC,QATH,WAClBC,OAAOC,SAAS,CACdC,IAAK,EACLC,KAAM,EACNC,SAAU,UAEb,EAGC,UACE,SAACT,EAAD,KAGL,C,uJCoED,UArEkB,WAChB,OAAsCU,EAAAA,EAAAA,YAAtC,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACQrB,GAAYsB,EAAAA,EAAAA,MAAZtB,QAkBR,IAhBAuB,EAAAA,EAAAA,YAAU,YACR,mCAAC,8GAEqBtB,EAAAA,EAAAA,IAAiBD,GAFtC,OAESwB,EAFT,OAGGL,EAAeK,EAAIC,KAAKC,MACxBL,GAAW,GAJd,gDAMGM,QAAQC,IAAR,UANH,yDAAD,sDASD,GAAE,CAAC5B,KAEJuB,EAAAA,EAAAA,YAAU,WACRX,OAAOC,SAAS,CAAEC,IAAK,IAAKE,SAAU,UACvC,GAAE,CAACE,IAECA,EAEL,OACE,UAAC,KAAD,YACE,SAAC,KAAD,oBACA,SAAC,KAAD,UACGA,EAAYW,OAAS,EACpBX,EAAYY,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,cAAeC,EAApC,EAAoCA,UAApC,OACd,UAAC,KAAD,WACGF,GACC,SAAC,KAAD,CACEG,IAAKtC,EAAAA,GAAWmC,EAChBI,IAAKH,EACLI,MAAO,IACPC,OAAQ,OAGV,SAAC,KAAD,CACEH,IAAKI,EACLH,IAAKH,EACLI,MAAO,IACPC,OAAQ,OAGZ,SAAC,KAAD,UAAiBL,KACjB,UAAC,KAAD,0BACa,0BAAOC,SAlBFH,EADN,KAwBhB,cACES,MAAO,CACLC,QAAS,OACTC,eAAgB,SAChBC,MAAO,SAJX,wDAWJ,SAAC,IAAD,KACA,SAAC,IAAD,CAAQvB,QAASA,MAGtB,C,iNChFYwB,EAAUtC,EAAAA,GAAAA,IAAH,qHAOPuC,EAAoBvC,EAAAA,GAAAA,GAAH,sHAOjBwC,EAAgBxC,EAAAA,GAAAA,GAAH,4IASbyC,EAAgBzC,EAAAA,GAAAA,GAAH,sWAmBb0C,EAAe1C,EAAAA,GAAAA,IAAH,4DAKZ2C,EAAiB3C,EAAAA,GAAAA,EAAH,wK","sources":["components/Api/Api.jsx","components/BtnToTop/BtnToTop.styled.jsx","components/BtnToTop/BtnToTop.jsx","pages/MovieCast/MovieCast.jsx","pages/MovieCast/MovieCast.styled.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const API_KEY = '14ce8915ef52d801924d89668f2ca827';\nexport const IMG_PATH = 'https://image.tmdb.org/t/p/original';\n\nexport const fetchTrendingMovies = async () =>\n  await axios.get(`trending/all/day?api_key=${API_KEY}`);\n\nexport const fetchMovieDetails = async movieId =>\n  await axios.get(`movie/${movieId}?api_key=${API_KEY}`);\n\nexport const fetchCastByMovie = async movieId =>\n  await axios.get(`movie/${movieId}/credits?api_key=${API_KEY}`);\n\nexport const fetchReviewsByMovie = async movieId =>\n  await axios.get(`movie/${movieId}/reviews?api_key=${API_KEY}&page=1`);\n\nexport const fetchBySearchMovie = async query =>\n  await axios.get(`search/movie?api_key=${API_KEY}&query=${query}&page=1`);\n","import styled from 'styled-components';\nimport { SlArrowUp } from 'react-icons/sl';\n\nexport const UpBtn = styled.button`\n  position: fixed;\n  bottom: 5%;\n  right: 3%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 50px;\n  height: 50px;\n  border: none;\n  border-radius: 50%;\n  color: black;\n  background-color: white;\n  cursor: pointer;\n  transition: all 250ms linear;\n\n  &:hover,\n  &:focus {\n    color: white;\n    background-color: red;\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 50px 100px -20px,\n      rgba(0, 0, 0, 0.3) 0px 30px 60px -30px,\n      rgba(10, 37, 64, 0.35) 0px -2px 6px 0px inset;\n  }\n`;\n\nexport const UpBtnIcon = styled(SlArrowUp)`\n  width: 30px;\n  height: 30px;\n`;\n","import { UpBtn, UpBtnIcon } from './BtnToTop.styled';\n\nexport const BtnToTop = () => {\n  const btnSettings = () => {\n    window.scrollTo({\n      top: 0,\n      left: 0,\n      behavior: 'smooth',\n    });\n  };\n\n  return (\n    <UpBtn type=\"button\" onClick={btnSettings}>\n      <UpBtnIcon />\n    </UpBtn>\n  );\n};\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchCastByMovie, IMG_PATH } from 'components/Api/Api';\nimport actorPlaceholder from '../../images/actor-placeholder.jpg';\nimport { BtnToTop } from 'components/BtnToTop/BtnToTop';\nimport { Loader } from 'components/Loader/Loader';\nimport {\n  Wrapper,\n  MovieDetailsTitle,\n  MovieCastList,\n  MovieCastItem,\n  MovieCastImg,\n  MovieActorData,\n} from './MovieCast.styled';\n\nconst MovieCast = () => {\n  const [castByMovie, setCastByMovie] = useState();\n  const [loading, setLoading] = useState(true);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    (async function getCastByMovie() {\n      try {\n        const res = await fetchCastByMovie(movieId);\n        setCastByMovie(res.data.cast);\n        setLoading(false);\n      } catch {\n        console.log(`Ooops!`);\n      }\n    })();\n  }, [movieId]);\n\n  useEffect(() => {\n    window.scrollTo({ top: 700, behavior: 'smooth' });\n  }, [castByMovie]);\n\n  if (!castByMovie) return;\n\n  return (\n    <Wrapper>\n      <MovieDetailsTitle>Cast</MovieDetailsTitle>\n      <MovieCastList>\n        {castByMovie.length > 0 ? (\n          castByMovie.map(({ id, profile_path, original_name, character }) => (\n            <MovieCastItem key={id}>\n              {profile_path ? (\n                <MovieCastImg\n                  src={IMG_PATH + profile_path}\n                  alt={original_name}\n                  width={200}\n                  height={300}\n                />\n              ) : (\n                <MovieCastImg\n                  src={actorPlaceholder}\n                  alt={original_name}\n                  width={200}\n                  height={300}\n                />\n              )}\n              <MovieActorData>{original_name}</MovieActorData>\n              <MovieActorData>\n                Character: <span>{character}</span>\n              </MovieActorData>\n            </MovieCastItem>\n          ))\n        ) : (\n          <p\n            style={{\n              display: 'flex',\n              justifyContent: 'center',\n              color: 'white',\n            }}\n          >\n            We don't have any casts for this movie!\n          </p>\n        )}\n      </MovieCastList>\n      <BtnToTop />\n      <Loader loading={loading} />\n    </Wrapper>\n  );\n};\n\nexport default MovieCast;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: 40px;\n`;\n\nexport const MovieDetailsTitle = styled.h2`\n  text-transform: uppercase;\n  text-align: center;\n  margin-bottom: 30px;\n  color: white;\n`;\n\nexport const MovieCastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-evenly;\n  gap: 40px;\n  width: 80%;\n  padding: 0;\n`;\n\nexport const MovieCastItem = styled.li`\n  margin: 0;\n  padding: 0;\n  color: white;\n  list-style: none;\n  width: 200px;\n  background-color: #740101ba;\n  box-shadow: inset 0 0 30px 1px rgb(0 0 0 / 75%),\n    0 11px 9px -5px rgb(0 0 0 / 75%);\n  border-radius: 5px;\n  overflow: hidden;\n  transition: all 250ms linear;\n\n  &:hover,\n  &:focus {\n    scale: 1.03;\n  }\n`;\n\nexport const MovieCastImg = styled.img`\n  margin: 0;\n  object-fit: cover;\n`;\n\nexport const MovieActorData = styled.p`\n  padding: 7px 5px;\n  font-size: 15px;\n  font-weight: 700;\n  text-align: center;\n  span {\n    font-size: 12px;\n    font-weight: 400;\n  }\n`;\n"],"names":["axios","API_KEY","IMG_PATH","fetchTrendingMovies","fetchMovieDetails","movieId","fetchCastByMovie","fetchReviewsByMovie","fetchBySearchMovie","query","UpBtn","styled","UpBtnIcon","SlArrowUp","BtnToTop","type","onClick","window","scrollTo","top","left","behavior","useState","castByMovie","setCastByMovie","loading","setLoading","useParams","useEffect","res","data","cast","console","log","length","map","id","profile_path","original_name","character","src","alt","width","height","actorPlaceholder","style","display","justifyContent","color","Wrapper","MovieDetailsTitle","MovieCastList","MovieCastItem","MovieCastImg","MovieActorData"],"sourceRoot":""}